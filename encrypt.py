import base64
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import json 

# Open database file & get all file paths
database = '/Users/mica/Projects/PDB/dataBase.json'
filePaths = []
with open(database,'r') as f:
    data = json.load(f)
    for item in data:
        filePaths.append(item['file'])

# Ask user for password & check if it's correct by comparing it to the test hash
actual_hash = b''
expected_hash = b'IFuauOyu_qv4b9KZvoBsP91yNh4-m1aWjmfGkxtrjxA='

while (actual_hash != expected_hash):
    print('Enter the password:', end=' ')
    answer = input()
    password = answer.encode()

    salt = b'\x1a\x1at\xd6n\xd1k\xbb\xa8Y*\xdf7\x02\x83\x1a' # os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    actual_hash = base64.urlsafe_b64encode(kdf.derive(password))
    if (actual_hash != expected_hash):
        print('Sorry, wrong password.')
    
# Encrypt all the files with a new hash
for file in filePaths:
    # Check to see if file is already encrypted
    with open(file,'rb') as f:
        header = f.readline()
        if b'Encrypted' in header:
            print('Already encrypted')
            continue
        data = header + f.read()

    # Generate the key (hash generated by the same algorithim as expected_hash, but with a different salt)
    salt = b'W\xec\x00bS\xa2\xd5\x88o\x141\\\xbd\xa4gG' # os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = base64.urlsafe_b64encode(kdf.derive(password))
    
    # Encrypt the file
    fernet = Fernet(key) #Turn key into a fernet object for symmetric (ie. fernet) encryption
    token = fernet.encrypt(data)

    #message = fernet.decrypt(token)
    #print(message)

    with open(file, 'wb') as f:
        f.write(b'Encrypted'+ b'\n')
        f.write(token)


    

# https://stackoverflow.com/questions/2572099/pythons-safest-method-to-store-and-retrieve-passwords-from-a-database
# https://stackoverflow.com/questions/489861/locking-a-file-in-python

